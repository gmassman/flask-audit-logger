PostgreSQL-Audit
================

|Build Status| |Version Status| |Downloads|

Auditing extension for PostgreSQL. Provides additional extensions for SQLAlchemy and Flask. PostgreSQL-Audit tries to combine the best of breed from existing solutions such as SQLAlchemy-Continuum_, Papertrail_ and especially `Audit Trigger by 2nd Quadrant`_.

Compared to existing solutions PostgreSQL-Audit has the following charasteristics:

- Stores all versions into single table called 'activity'
- Uses minimalistic trigger based approach to keep INSERTs, UPDATEs and DELETEs as fast as possible
- Tracks actor IDs to be able to answer these questions quickly:
    - Who modified record x on day x?
    - What did person x do between y and z?
    - Can you show me the activity history of record x?


.. _Audit Trigger by 2nd Quadrant: https://github.com/2ndQuadrant/audit-trigger

.. _Papertrail: https://github.com/airblade/paper_trail

.. _SQLAlchemy-Continuum: https://github.com/kvesteri/SQLAlchemy-Continuum


Installation
------------

::

    pip install PostgreSQL-Audit


Setup with Flask-SQLAlchemy and Flask-Migrate
--------------------
Add the following to your models.py (or equivalent file)

.. code-block:: python


    from flask_migrate import Migrate
    from flask_sqlalchemy import SQLAlchemy
    from flask_audit_logger.flask import AuditLogger

    db = SQLAlchemy()
    migrate = Migrate()

    ... model definitions ...

    # Configure the audit_logs schema. Change the schema_name if you'd like
    audit_logger = AuditLogger(get_actor_id=get_current_user_id, actor_cls="YourMainUserModel", schema_name="audit_logs")
    audit_logger.init(db.Model)


You will separately need to call the ``AuditLogger.init_app()`` in your app factories.
This must happen after the database has been configured:

.. code-block:: python


 from models import db, migrate, audit_logger

 def create_app():
    app = Flask(__name__)

    # Database extensions
    db.init_app(app)
    migrate.init_app(app, db)
    audit_logger.init_app(app)


Using flask-migrate, create a new revision with ``flask db migrate -m 'add postgres_audit tables'``.
Open the new revision file and make the following changes. Autogenerated alembic code has been omitted:

.. code-block:: python

 def upgrade_():
    op.execute("CREATE EXTENSION IF NOT EXISTS btree_gist")
    if audit_logger.schema_name:
        op.execute(sa.schema.DDL(audit_logger.render_tmpl('create_schema.sql')))
    # ### commands auto generated by Alembic - please adjust! ###
    ...
    # ### end Alembic commands ###

    op.execute(sa.schema.DDL(audit_logger.render_tmpl("jsonb_change_key_name.sql")))
    op.execute(audit_logger.operators_sql())
    op.execute(audit_logger.audit_table_sql())


 def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    ...
    # ### end Alembic commands ###
    if audit_logger.schema_name:
        op.execute(sa.schema.DDL(audit_logger.render_tmpl('drop_schema.sql')))
    op.execute("DROP EXTENSION IF EXISTS btree_gist")


This will create an audit logs schema and the main ``audit_table()`` postgres function for tracking changes to the versioned tables.



Running the tests
-----------------

::

    git clone https://github.com/kvesteri/postgresql-audit.git
    cd postgresql-audit
    pip install tox
    createdb flask_audit_logger_test
    tox


Flask extension
---------------

.. code-block:: python


    from flask_audit_logger.flask import audit_logger

    from my_app.extensions import db


    audit_logger.init(db.Model)


    class Article(db.Model):
        __tablename__ = 'article'
        __versioned__ = {}  # <- IMPORTANT!
        id = db.Column(db.Integer, primary_key=True)
        name = db.Column(db.String)


    article = Article(name='Some article')
    db.session.add(article)
    db.session.commit()



Now we can check the newly created activity.

.. code-block:: python

    Activity = audit_logger.activity_cls

    activity = Activity.query.first()
    activity.id             # 1
    activity.table_name     # 'article'
    activity.verb           # 'insert'
    activity.old_data       # None
    activity.changed_data   # {'id': '1', 'name': 'Some article'}


.. code-block:: python

    article.name = 'Some other article'
    db.session.commit()

    activity = Activity.query.order_by(db.desc(Activity.id)).first()
    activity.id             # 2
    activity.table_name     # 'article'
    activity.verb           # 'update'
    activity.object_id      # 1
    activity.old_data       # {'id': '1', 'name': 'Some article'}
    activity.changed_data   # {'name': 'Some other article'}


.. code-block:: python

    db.session.delete(article)
    db.session.commit()

    activity = Activity.query.order_by(db.desc(Activity.id)).first()
    activity.id             # 3
    activity.table_name     # 'article'
    activity.verb           # 'delete'
    activity.object_id      # 1
    activity.old_data       # {'id': '1', 'name': 'Some other article'}
    activity.changed_data   # None


.. |Build Status| image:: https://github.com/kvesteri/postgresql-audit/actions/workflows/test.yml/badge.svg?branch=master
.. |Version Status| image:: https://img.shields.io/pypi/v/PostgreSQL-Audit.svg
   :target: https://pypi.python.org/pypi/PostgreSQL-Audit/
.. |Downloads| image:: https://img.shields.io/pypi/dm/PostgreSQL-Audit.svg
   :target: https://pypi.python.org/pypi/PostgreSQL-Audit/
